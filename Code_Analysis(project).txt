//splash

* import java.util.logging - Provides the classes and interfaces of the JavaTM 2 platform's core logging facilities.
* Level	- The Level class defines a set of standard logging levels that can be used to control logging output. (import java.util.logging.Level;)
* Logger - A Logger object is used to log messages for a specific system or application component. (import java.util.logging.Logger;)
* Thread.sleep() method can be used to pause the execution of the current thread for a specified time in milliseconds. Thread.sleep(20); - time 20 milliseconds.
* string.valueOf() method converts different types of values into string.
* setVisible(true) - method makes the frame appear on the screen.
* dispose() - method performs all object cleanup.
* InterruptedException - is thrown when a thread is interrupted while it's waiting, sleeping, or otherwise occupied.
--------------------------------------------------------------------------------------------------------------------

// RegistrationForm

* import java.text.SimpleDateFormat; - provides methods to format and parse date and time in java.
* The Arrays class in java.util package is a part of the Java Collection Framework. This class provides static methods to dynamically create and access Java arrays. 
It consists of only static methods and the methods of Object class. (import java.util.Arrays;)
* import java.util.regex.Pattern; - Java does not have a built-in Regular Expression class, but we can import the java.util.regex package to work with regular expressions. The package includes the following classes:
Pattern Class - Defines a pattern (to be used in a search)
Matcher Class - Used to search for the pattern
PatternSyntaxException Class - Indicates syntax error in a regular expression pattern

* A PreparedStatement is a pre-compiled SQL statement
* connection - helps to establish a connection with the database.
*  isEmpty() - method checks whether a string is empty or not.
* equals() - method compares two strings, and returns true if the strings are equal, and false if not.
* The easiest way to check if a regular expression pattern matches a text is to use the static Pattern.matches() method.
* Class.forName - returns the Class object associated with the class or interface with the given string name .
* DriverManager.getConnection - method of Java DriverManager class attempts to establish a connection to the database by using the given database URL.
* getSelectedItem().toString() - selected item from combo box returns as string.
* executeUpdate() - Use this method to execute SQL statements. This method is used to execute statements such as insert, update, delete.
* pack() - method is defined in Window class in Java and it sizes the frame so that all its contents are at or above their preferred sizes.
* setLocationRelativeTo(null) - is used to center frame in the screen.
* setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE) - Define the default close operation of a JFrame to EXIT_ON_CLOSE, application will exit by calling System.exit()
* using setState(JFrame.ICONIFIED) to minimize a JFrame and setState(JFrame.MAXIMIZED_BOTH) to maximize a JFrame.
-----------------------------------------------------------------------------------------------------------------------

//loginform

* ResultSet - is a Java object that contains the results of executing an SQL query.
* setFocusable() - is actually a method from the Component class in Swing. It lets the component have the power of getting focused.
* executeQuery() - This method is used to execute statements that returns tabular data (example select). It returns an object of the class ResultSet.
* rs.next() - means that if the next row is not null (means if it exist), Go Ahead. The next() method of the ResultSet interface moves the pointer of the current (ResultSet) object to the next row, from the current position.
* The this keyword refers to the current object in a method or constructor. The most common use of the this keyword is to eliminate the confusion between class attributes and parameters with the same name (because a class attribute
 is shadowed by a method or constructor parameter).
* setEchoChar(char c) : set the echo character for JPasswordField.
* trim() method removes whitespace from both ends of a string.
* setString(int, string): This method can be used to set string value at the given parameter index.
------------------------------------------------------------------------------------------------------------------------

//homepage

* nothing new
-----------------------------------------------------------------------------------------------------------------------

//showFlighs

* showFlights sf = new showFlights(departt) - here showFlights is a class & showFlights(departt) is a parameterized constructor .
* setEditable() - method has one Boolean parameter. If the parameter is false, then the user cannot type into the field.
------------------------------------------------------------------------------------------------------------------------

//flightbking

* nothing new
-----------------------------------------------------------------------------------------------------------------------

//flightcancel

* nothing new
-----------------------------------------------------------------------------------------------------------------------

//billingPage

*  Integer.parseInt() - It is used in Java for converting a string value to an integer by using the method parseInt().
-----------------------------------------------------------------------------------------------------------------------

//payment

* The setLenient() - method in DateFormat class is used to specify whether the interpretation of the date and time of this DateFormat object is to be lenient or not.
  if you have a pattern and create a date object that strictly matches your pattern, set lenient to false.
* parse() method of DateFormat class is used to parse the text from a string to produce the Date. (expiry = dateformat.parse(E_dat);)
* before() method is used to check if a given date is before another given date. Date( ) - This constructor initializes the object with the current date and time.
( boolean expired = expiry.before(new Date());)

/printing code analysis

* PrinterJob class is the principal class that controls printing. getPrinterJob() - method creates and returns a PrinterJob which is initially associated with the default printer.
(PrinterJob printerJob = PrinterJob.getPrinterJob();)
* setJobName - Sets the name of the document to be printed. The document name can not be null.
* printerJob.setPrintable() - set printable
* The @Override annotation indicates that the child class method is over-writing its base class method.
* if (pageIndex > 0) {
                    return Printable.NO_SUCH_PAGE;
                } 
check if no printable content

* Graphics2D graphics2D = (Graphics2D) graphics; - make 2D graphics to map content
* graphics2D.translate(pageFormat.getImageableX() * 2, pageFormat.getImageableY() * 2); - set graphics translation
* graphics2D.scale(0.685, 0.685); - set page scale
* panel.paint(graphics2D); - paint panel as graphics2D
* return Printable.PAGE_EXISTS; - return if page exists
* PrintDialog() - control is used to open the Windows Print Dialog and let the user select the printer, set printer and paper properties, and print a file. (boolean returninResult = printerJob.printDialog();)
* if (returninResult) {
            try {
                printerJob.print();
            } catch (PrinterException printerException) {
                JOptionPane.showMessageDialog(this, "Print Error: " + printerException.getMessage());
            }
        }

check if print dialog is showing - if (returninResult)
printerJob.print() - call print() method inside printerJob to print
-----------------------------------------------------------------------------------------------------------------------

//dashboard

* getModel() Returns the TableModel that provides the data displayed by this JTable .
* setRowCount() - Sets the number of rows in the model.

-----------------------------------------------------------------------------------------------------------------------




































